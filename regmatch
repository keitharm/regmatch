#!/usr/bin/env node

var fs         = require('fs');
var argv       = require('minimist')(process.argv.slice(2));
var args       = argv._; // Get the non flag arguments
var vals       = {};

// Extract named parameters
Object.keys(argv).slice(1).forEach(function(value) {
  vals[value] = true;
});

if (process.stdin.constructor.name === "ReadStream") {
  prep(0);
} else {
  var data = '';
  process.stdin.setEncoding('utf-8');
  process.stdin.on('readable', function() {
    var chunk;
    while (chunk = process.stdin.read()) {
      data += chunk;
    }
  });

  process.stdin.on('end', function () {
    // There will be a trailing \n from the user hitting enter. Get rid of it.
    vals['data'] = data.replace(/\n$/, '');
    prep(1);
  });
}

function prep(type) {
  // type = 0 means no stdin
  var stdin = true;
  if (type === 0) {
    vals['data'] = args.splice(args.length-1, 1)[0]; // Data is the last argument.
    stdin = false;
  }
  // Regex is 1st argument
  vals['regexRaw'] = args[0] || '';

  if (empty(vals['data']) || empty(vals['regexRaw'])) {
    process.exit();
  }

  vals['modifiers'] = args[1] || argv['modifiers'] || '';
  vals['format']    = args[2] || argv['format'] || '';

  // If format supplied, cancel out raw mode
  if (!empty(vals['format'])) {
    vals['raw'] = false;
  }

  try {
    vals['regex'] = new RegExp(vals['regexRaw'], vals['modifiers']);
  } catch (e) {
    console.error(e);
    process.exit();
  }

  regMatch(function(results) {
    if (vals['prettyjson'] === true) {
      console.log(JSON.stringify(results, null, '\t'));
    } else if (vals['json'] === true) {
      console.log(JSON.stringify(results));
    } else if (vals['raw']) {
      results.forEach(function(result) {
        console.log(result[0])
      });
    } else if (vals['format'] !== "") {

      results.forEach(function(result) {
        var copy = vals['format'];
        result.forEach(function(variable, index) {
          copy = copy.replace("$" + index, variable);
        });
        console.log(copy);
      });
    } else {
      console.log(results);
    }
  });
}

function regMatch(cb) {
  var matches   = [];

  // Check if data is a file
  if (exists(vals['data'])) {
    vals['data'] = fs.readFileSync(vals['data'], 'utf-8');
  }
  var found = vals['regex'].exec(vals['data'], vals['modifiers']);
  if (vals['modifiers'].indexOf('g') !== -1) {
    var times = 0;
    while(found !== null) {
      // No matching groups
      if (Object.keys(found).length === 3) {
        matches.push(found.slice(0));
      } else {
        matches.push(found.slice(1));
      }
      found = vals['regex'].exec(vals['data'], vals['modifiers']);
      if (++times === 100) {
        matches = [matches[0]];
        break;
      }
    }
    cb(matches);
  } else {
    var result = vals['regex'].exec(vals['data'], vals['modifiers']) || [];
    // No matching groups
    if (Object.keys(result).length === 3) {
      cb([result.slice(0)]);
    } else {
      cb([result.slice(1)]);
    }
  }
}

function exists(file) {
  try {
    fs.statSync(file);
  } catch(e) {
    return false;
  }
  return true;
}

function empty(val) {
  return val === '' || val === undefined;
}