#!/usr/bin/env node

var fs        = require('fs');
var args      = process.argv.slice(2);
var rawMode   = false;

// Raw mode, default to off
// on = return the exact regex.exec result
// off = return match only
if (args.indexOf("--raw") !== -1) {
  rawMode = true;
  args.splice(args.indexOf("--raw"), 1);
}

var data, modifiers, regex;
if (process.stdin.isTTY) {
  // Even though executed by name, the first argument is still "node",
  // the second the script name. The third is the string we want.
  // Do my thing

  data      = args[0];
  modifiers = args[2] !== undefined ? args[2] : "";

  try {
  regex = new RegExp(args[1], modifiers);
  } catch (e) {
    console.error(e);
    process.exit();
  }

  // If no data or match supplied, just quit
  if (data === undefined || args[1] === undefined || args[1] === '') process.exit(0);

  regMatch(function(results) {
    console.log(results);
  });
} else {
  data = '';
  process.stdin.setEncoding('utf-8');
  process.stdin.on('readable', function() {
    var chunk;
    while (chunk = process.stdin.read()) {
      data += chunk;
    }
  });

  process.stdin.on('end', function () {
    // There will be a trailing \n from the user hitting enter. Get rid of it.
    data = data.replace(/\n$/, '');
    // do my thing


    modifiers = args[1] !== undefined ? args[1] : "";

    try {
    regex = new RegExp(args[0], modifiers);
    } catch (e) {
      console.error(e);
      process.exit();
    }

    // If no data or match supplied, just quit
    if (data === undefined || args[0] === undefined || args[0] === '') process.exit(0);

    regMatch(function(results) {
      console.log(results);
    });
  });
}

function regMatch(cb) {
  var matches   = [];

  // Check if data is a file
  if (exists(data)) {
    data = fs.readFileSync(data, 'utf-8');
  }
  var found = regex.exec(data, modifiers);
  if (modifiers.indexOf('g') !== -1) {
    while(found !== null) {
      if (rawMode) {
        matches.push(found.slice(0));
      } else {
        // No matching groups
        if (Object.keys(found).length === 3) {
          matches.push(found.slice(0));
        } else {
          matches.push(found.slice(1));
        }
      }
      found = regex.exec(data, modifiers);
    }
    cb(matches);
  } else {
    var result = regex.exec(data, modifiers) || [];
    if (rawMode) {
      cb(result.slice(0));
    } else {
      // No matching groups
      if (Object.keys(result).length === 3) {
        cb(result.slice(0));
      } else {
        cb(result.slice(1));
      }
    }
  }
}

function exists(file) {
  try {
    fs.statSync(file);
  } catch(e) {
    return false;
  }
  return true;
}
